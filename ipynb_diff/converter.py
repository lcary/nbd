from datetime import datetime
import json
import logging

from .command import (ANSI_LIGHT_GREEN, echo)
from .const import PKG_NAME
from .exporter import NbConvertExporter
from .fileops import (normrelpath, write_file)

logger = logging.getLogger()


class NotebookConverter(object):
  README_MESSAGE = (
    'The files in {output_dir}/ were automatically generated by '
    '{program}. Do not edit manually.\n')

  def __init__(self, output_dir, repo_root, nbformat_version):
    self.start_time = datetime.now()
    self.exporter = NbConvertExporter(output_dir, nbformat_version)
    self.repo_root = repo_root
    # make all paths relative to root of the git repo
    self.output_dir = normrelpath(output_dir, repo_root)
    self.files_converted = 0

  def convert(self, files):
    self._setup()
    self._convert(files)
    self._teardown()

  def _setup(self):
    self._write_readme()
    self._write_gitignore()

  def _convert(self, files):
    for filepath in files:
      self.exporter.load(filepath, self.repo_root)
      self.exporter.export_python()
      self.exporter.export_rst()
      self.files_converted += 1

  def _teardown(self):
    msg = "generated content for {} ipynb file(s) in {}/".format(
      self.files_converted, self.output_dir)
    echo("finished", ANSI_LIGHT_GREEN, msg)
    self._write_data(datetime.now())

  def _write_readme(self):
    content = self.README_MESSAGE.format(
      output_dir=self.output_dir,
      program=PKG_NAME)
    write_file(self.output_dir, 'readme.txt', content)

  def _write_gitignore(self):
    content = ("*.log\n")
    write_file(self.output_dir, '.gitignore', content)

  def _write_data(self, end_time):
    data = dict(
      program=PKG_NAME,
      output_dir=self.output_dir,
      time_started=str(self.start_time),
      time_finished=str(end_time),
      runtime_seconds=(end_time - self.start_time).total_seconds(),
      files_converted=self.files_converted)
    content = json.dumps(data, indent=2, sort_keys=True)
    write_file(self.output_dir, 'data.json', content)
