from datetime import datetime
import json
import logging

from .command import (ANSI_LIGHT_GREEN, echo)
from .const import PKG_NAME
from .fileutil import (get_path_dict, normrelpath, write_file)
from .jupyter import JupyterCommand

logger = logging.getLogger()


class NotebookConverter(object):
  README_MESSAGE = (
    'The files in {output_dir}/ were automatically generated by '
    '{program}. Do not edit manually.\n')

  def __init__(self, path_list, output_dir, repo_root):
    self.command = JupyterCommand(output_dir)
    self.repo_root = repo_root
    # make all paths relative to root of the git repo
    self.output_dir = normrelpath(output_dir, repo_root)
    self.path_dict = get_path_dict(output_dir, path_list, repo_root)

  def _write_data(self):
    data = dict(
      program=PKG_NAME,
      output_dir=self.output_dir,
      time_created=str(datetime.now()),
      files_converted=self.path_dict)

    content = json.dumps(data, indent=2, sort_keys=True)
    write_file(self.output_dir, 'data.json', content)

  def _write_readme(self):
    content = self.README_MESSAGE.format(
      output_dir=self.output_dir,
      program=PKG_NAME)

    write_file(self.output_dir, 'readme.txt', content)

  def _write_gitignore(self):
    content = ("*.log\n")
    write_file(self.output_dir, '.gitignore', content)

  def _setup(self):
    self._write_data()
    self._write_readme()
    self._write_gitignore()

  def _teardown(self):
    msg = "generated content for {} ipynb file(s) in {}/".format(
      len(self.path_dict), self.output_dir)
    echo("finished", ANSI_LIGHT_GREEN, msg)

  def _convert(self):
    for (basename, path) in self.path_dict.items():
      self.command.convert_to_python(path, basename)
      self.command.convert_to_rst(path, basename)

  def convert(self):
    self._setup()
    self._convert()
    self._teardown()
