#!/bin/python

from argparse import ArgumentParser
from contextlib import contextmanager
from datetime import datetime
from distutils import dir_util
import json
from os import (chdir, getcwd)
from os import path as ospath
from subprocess import (CalledProcessError, check_output)

ANSI_LIGHT_RED = 31
ANSI_LIGHT_GREEN = 32


def color(msg, ansicode):
  return '\033[1;{ansicode};40m{msg}\033[0m'.format(msg=msg, ansicode=ansicode)


def echo(subject, ansicode, msg):
  print('{}: {}'.format(color(subject, ansicode), msg))


def cd_echo(path):
  echo('cd', ANSI_LIGHT_GREEN, path)
  chdir(path)


@contextmanager
def cd_if_necessary(path):
  orig = getcwd()
  should_cd = (orig != path)
  try:
    if should_cd:
      cd_echo(path)
    yield
  finally:
    if should_cd:
      cd_echo(orig)
    else:
      pass


class Command(object):

  @staticmethod
  def _echo(args):
    echo("running", ANSI_LIGHT_RED, " ".join(args))

  @classmethod
  def run(cls, args, echo=True):
    if echo:
      cls._echo(args)
    return check_output(args)


@contextmanager
def cd_repo_root():
  args = ['git', 'rev-parse', '--show-toplevel']
  repo_root = Command().run(args).strip('\n')
  try:
    with cd_if_necessary(repo_root):
      yield repo_root
  finally:
    pass


def get_abspath_dict(paths):
  path_dict = {}
  for path in paths:
    basename = path.replace(ospath.sep, "_")
    path_dict[basename] = ospath.abspath(path)
  return path_dict


class Converter(object):
  README_MESSAGE = (
    'The files in {output_dir}/ were automatically generated by '
    '{program}. Do not edit manually.\n')

  class JupyterCommandMissing(Exception):
    pass

  class JupyterCommandFailure(Exception):
    pass

  def __init__(self, path_dict, output_dir, repo_root):
    self.cmd = Command()
    self.repo_root = repo_root
    # make all paths relative to root of the git repo
    self.output_dir = ospath.relpath(output_dir, start=repo_root)
    self.path_dict = self._convert_to_relpaths(path_dict, repo_root)

  @staticmethod
  def _convert_to_relpaths(abspath_dict, root_dir):
    relpath_dict = {}
    for (key, path) in abspath_dict.items():
      relpath_dict[key] = ospath.relpath(path, start=root_dir)
    return relpath_dict

  def _write_file(self, path, content):
    with open(ospath.join(self.output_dir, path), 'w') as f:
      f.write(content)

  def _write_data(self):
    data = dict(
      program=ospath.basename(__file__),
      output_dir=self.output_dir,
      time_created=str(datetime.now()),
      files_converted=self.path_dict)

    content = json.dumps(data, indent=2, sort_keys=True)
    self._write_file('data.json', content)

  def _write_readme(self):
    content = self.README_MESSAGE.format(
      output_dir=self.output_dir,
      program=ospath.basename(__file__))

    self._write_file('readme.txt', content)

  def _setup(self):
    dir_util.mkpath(self.output_dir)
    self._write_data()
    self._write_readme()


  def _nbconvert(self, path, basename, export_fmt):
    cmd = ['jupyter', 'nbconvert', path,
      '--output={}'.format(basename),
      '--output-dir={}'.format(self.output_dir),
      '--to={}'.format(export_fmt)]

    try:
      return self.cmd.run(cmd)
    except OSError as e:
      msg = ("Unable to call jupyter.\n"
        "Please install all requirements in requirements.txt first.\n"
        "Original Exception:\n{}".format(e))
      raise self.JupyterCommandMissing(msg)
    except CalledProcessError as e:
      raise self.JupyterCommandFailure(e)

  def _nbconvert_list(self, export_fmt):
    for (basename, path) in self.path_dict.items():
      self._nbconvert(path, basename, export_fmt)

  def _to_python(self):
    self._nbconvert_list('python')

  def _to_rst(self):
    self._nbconvert_list('rst')

  def _teardown(self):
    msg = "generated content for {} ipynb file(s) in {}/".format(
      len(self.path_dict), self.output_dir)
    echo("finished", ANSI_LIGHT_GREEN, msg)

  def convert(self):
    self._setup()
    self._to_python()
    self._to_rst()
    self._teardown()


def main():
  parser = ArgumentParser()
  parser.add_argument('files', nargs='+')
  parser.add_argument('--output_dir', default='ipynb_generated')
  args = parser.parse_args()

  # convert input paths to absolute paths
  path_dict = get_abspath_dict(args.files)
  output_dir = ospath.abspath(args.output_dir)

  # cd to the root of the git repo and convert files
  with cd_repo_root() as repo_root:
    Converter(path_dict, output_dir, repo_root).convert()

if __name__ == '__main__':
  main()
